version: '3.9'

services:
  postgres:
    image: postgres:15-alpine
    container_name: lostandfound-postgres
    environment:
      POSTGRES_DB: ${PGDATABASE:-lostandfound}
      POSTGRES_USER: ${PGUSER:-postgres}
      POSTGRES_PASSWORD: ${PGPASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 10

  auth-service:
    build: ./auth-service
    environment:
      NODE_ENV: development
      PORT: 4001
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${PGDATABASE:-lostandfound}
      PGUSER: ${PGUSER:-postgres}
      PGPASSWORD: ${PGPASSWORD:-postgres}
      JWT_SECRET: ${JWT_SECRET:-devsecret}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "4001:4001"

  items-service:
    build: ./items-service
    environment:
      NODE_ENV: development
      PORT: 4002
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${PGDATABASE:-lostandfound}
      PGUSER: ${PGUSER:-postgres}
      PGPASSWORD: ${PGPASSWORD:-postgres}
      JWT_SECRET: ${JWT_SECRET:-devsecret}
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      SENDER_EMAIL: ${SENDER_EMAIL:-no-reply@example.com}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "4002:4002"

  api-gateway:
    build: ./api-gateway
    environment:
      NODE_ENV: development
      PORT: 8080
      AUTH_SERVICE_URL: http://auth-service:4001
      ITEMS_SERVICE_URL: http://items-service:4002
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
    depends_on:
      - auth-service
      - items-service
    ports:
      - "8080:8080"

volumes:
  pgdata:


